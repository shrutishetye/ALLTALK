'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34011
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AllTalk")>  _
Partial Public Class LDataBaseDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertC_Contact(instance As C_Contact)
    End Sub
  Partial Private Sub UpdateC_Contact(instance As C_Contact)
    End Sub
  Partial Private Sub DeleteC_Contact(instance As C_Contact)
    End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertMessage(instance As Message)
    End Sub
  Partial Private Sub UpdateMessage(instance As Message)
    End Sub
  Partial Private Sub DeleteMessage(instance As Message)
    End Sub
  Partial Private Sub InsertUser_Detail(instance As User_Detail)
    End Sub
  Partial Private Sub UpdateUser_Detail(instance As User_Detail)
    End Sub
  Partial Private Sub DeleteUser_Detail(instance As User_Detail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.VBChatServer.My.MySettings.Default.AllTalkConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property C_Contacts() As System.Data.Linq.Table(Of C_Contact)
		Get
			Return Me.GetTable(Of C_Contact)
		End Get
	End Property
	
	Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property Messages() As System.Data.Linq.Table(Of Message)
		Get
			Return Me.GetTable(Of Message)
		End Get
	End Property
	
	Public ReadOnly Property User_Details() As System.Data.Linq.Table(Of User_Detail)
		Get
			Return Me.GetTable(Of User_Detail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.C_Contacts")>  _
Partial Public Class C_Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _host_id As String
	
	Private _company_id As String
	
	Private _name As String
	
	Private _language As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onhost_idChanging(value As String)
    End Sub
    Partial Private Sub Onhost_idChanged()
    End Sub
    Partial Private Sub Oncompany_idChanging(value As String)
    End Sub
    Partial Private Sub Oncompany_idChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As String)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_host_id", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property host_id() As String
		Get
			Return Me._host_id
		End Get
		Set
			If (String.Equals(Me._host_id, value) = false) Then
				Me.Onhost_idChanging(value)
				Me.SendPropertyChanging
				Me._host_id = value
				Me.SendPropertyChanged("host_id")
				Me.Onhost_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_company_id", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property company_id() As String
		Get
			Return Me._company_id
		End Get
		Set
			If (String.Equals(Me._company_id, value) = false) Then
				Me.Oncompany_idChanging(value)
				Me.SendPropertyChanging
				Me._company_id = value
				Me.SendPropertyChanged("company_id")
				Me.Oncompany_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contacts")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _host_id As String
	
	Private _contact_id As String
	
	Private _fname As String
	
	Private _lname As String
	
	Private _language As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onhost_idChanging(value As String)
    End Sub
    Partial Private Sub Onhost_idChanged()
    End Sub
    Partial Private Sub Oncontact_idChanging(value As String)
    End Sub
    Partial Private Sub Oncontact_idChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As String)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_host_id", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property host_id() As String
		Get
			Return Me._host_id
		End Get
		Set
			If (String.Equals(Me._host_id, value) = false) Then
				Me.Onhost_idChanging(value)
				Me.SendPropertyChanging
				Me._host_id = value
				Me.SendPropertyChanged("host_id")
				Me.Onhost_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contact_id", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property contact_id() As String
		Get
			Return Me._contact_id
		End Get
		Set
			If (String.Equals(Me._contact_id, value) = false) Then
				Me.Oncontact_idChanging(value)
				Me.SendPropertyChanging
				Me._contact_id = value
				Me.SendPropertyChanged("contact_id")
				Me.Oncontact_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="NVarChar(50)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="NVarChar(50)")>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Messages")>  _
Partial Public Class Message
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _msg_id As String
	
	Private _timestamp As System.Data.Linq.Binary
	
	Private _sender_id As String
	
	Private _receiver_id As String
	
	Private _msg As String
	
	Private _sender_lang As String
	
	Private _receiver_lang As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmsg_idChanging(value As String)
    End Sub
    Partial Private Sub Onmsg_idChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub Onsender_idChanging(value As String)
    End Sub
    Partial Private Sub Onsender_idChanged()
    End Sub
    Partial Private Sub Onreceiver_idChanging(value As String)
    End Sub
    Partial Private Sub Onreceiver_idChanged()
    End Sub
    Partial Private Sub OnmsgChanging(value As String)
    End Sub
    Partial Private Sub OnmsgChanged()
    End Sub
    Partial Private Sub Onsender_langChanging(value As String)
    End Sub
    Partial Private Sub Onsender_langChanged()
    End Sub
    Partial Private Sub Onreceiver_langChanging(value As String)
    End Sub
    Partial Private Sub Onreceiver_langChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_msg_id", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property msg_id() As String
		Get
			Return Me._msg_id
		End Get
		Set
			If (String.Equals(Me._msg_id, value) = false) Then
				Me.Onmsg_idChanging(value)
				Me.SendPropertyChanging
				Me._msg_id = value
				Me.SendPropertyChanged("msg_id")
				Me.Onmsg_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_timestamp", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property timestamp() As System.Data.Linq.Binary
		Get
			Return Me._timestamp
		End Get
		Set
			If (Object.Equals(Me._timestamp, value) = false) Then
				Me.OntimestampChanging(value)
				Me.SendPropertyChanging
				Me._timestamp = value
				Me.SendPropertyChanged("timestamp")
				Me.OntimestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sender_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property sender_id() As String
		Get
			Return Me._sender_id
		End Get
		Set
			If (String.Equals(Me._sender_id, value) = false) Then
				Me.Onsender_idChanging(value)
				Me.SendPropertyChanging
				Me._sender_id = value
				Me.SendPropertyChanged("sender_id")
				Me.Onsender_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_receiver_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property receiver_id() As String
		Get
			Return Me._receiver_id
		End Get
		Set
			If (String.Equals(Me._receiver_id, value) = false) Then
				Me.Onreceiver_idChanging(value)
				Me.SendPropertyChanging
				Me._receiver_id = value
				Me.SendPropertyChanged("receiver_id")
				Me.Onreceiver_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_msg", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property msg() As String
		Get
			Return Me._msg
		End Get
		Set
			If (String.Equals(Me._msg, value) = false) Then
				Me.OnmsgChanging(value)
				Me.SendPropertyChanging
				Me._msg = value
				Me.SendPropertyChanged("msg")
				Me.OnmsgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sender_lang", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property sender_lang() As String
		Get
			Return Me._sender_lang
		End Get
		Set
			If (String.Equals(Me._sender_lang, value) = false) Then
				Me.Onsender_langChanging(value)
				Me.SendPropertyChanging
				Me._sender_lang = value
				Me.SendPropertyChanged("sender_lang")
				Me.Onsender_langChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_receiver_lang", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property receiver_lang() As String
		Get
			Return Me._receiver_lang
		End Get
		Set
			If (String.Equals(Me._receiver_lang, value) = false) Then
				Me.Onreceiver_langChanging(value)
				Me.SendPropertyChanging
				Me._receiver_lang = value
				Me.SendPropertyChanged("receiver_lang")
				Me.Onreceiver_langChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.User_Details")>  _
Partial Public Class User_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Reg_id As String
	
	Private _fname As String
	
	Private _lname As String
	
	Private _email As String
	
	Private _language As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReg_idChanging(value As String)
    End Sub
    Partial Private Sub OnReg_idChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnlanguageChanging(value As String)
    End Sub
    Partial Private Sub OnlanguageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reg_id", DbType:="NChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Reg_id() As String
		Get
			Return Me._Reg_id
		End Get
		Set
			If (String.Equals(Me._Reg_id, value) = false) Then
				Me.OnReg_idChanging(value)
				Me.SendPropertyChanging
				Me._Reg_id = value
				Me.SendPropertyChanged("Reg_id")
				Me.OnReg_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="NVarChar(50)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_language", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property language() As String
		Get
			Return Me._language
		End Get
		Set
			If (String.Equals(Me._language, value) = false) Then
				Me.OnlanguageChanging(value)
				Me.SendPropertyChanging
				Me._language = value
				Me.SendPropertyChanged("language")
				Me.OnlanguageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
